from Crypto.Util.number import GCD, bytes_to_long, long_to_bytes
import gmpy2
import binascii
from functools import reduce

with open('loud-output.txt', 'r') as f:
	data = f.readlines()

ps = eval(data[0])
S = eval(data[1])

def crt(a, n):
	sum = 0
	prod = reduce(lambda x, y: x*y, n)
	for n_i, a_i in zip(n, a):
		p = prod // n_i
		sum += a_i * gmpy2.invert(p, n_i) * p
	return sum % prod


for a in range(5):
	for b in range(5):
		for c in range(5):
			for d in range(5):
				for e in range(5):
					if crt([S[0][a], S[1][b], S[2][c], S[3][d], S[4][e]], ps[0:5]) < 2**2048:
						print(a, b, c, d, e, crt([S[0][a], S[1][b], S[2][c], S[3][d], S[4][e]], ps[0:5]))
						break

# 4 2 1 3 0 18922407639296972246191371432397978315386578296356999291065561930577256620707990789134140462037983153028548632889992396570080764738195093020155868369504445663367423838715497226139033220281291248650335979913894224072853486274204732048435967819251310002386638003616868532044153544112397515364414537918494765550207028116009583951771150570789835978039553665601452592310490071947602188415534393382497457219733205754704698350395226950611052226358712636307609098244054439457510464602328769123309110754080447570445025279198291717920142189390547356394976658948208719675358805041478262910064361936599983778928269567693959525037
